
1.Write a shell script that lists all files in a specified directory and saves the output to a text file.
Ans:

#!/bin/bash

FILE=/tmp/list.txt
read -p "enter your Directory name:" DIR
if [[ -d $DIR ]]
then
    echo -e "Directory $DIR found"
    ls -a $DIR > $FILE 
    echo -e "output stored in file $FILE"
else
    echo -e "check your input"
fi

--------------------------------------------------------------------------------------------------------------------------------
2. Write a shell script to monitor disk usage and send an email alert if usage exceeds a specified threshold.
Ans:

#!/bin/bash

read -p "Enter the name of disk you want to check:" DISK

TRESHHOLD=75
PERC=`df -h | grep "$DISK" | awk '{print $5}' | tr -d % > /dev/null`

if [[ $PERC -ge $TRESHHOLD ]]
then
    echo -e "Check your storage of / disk, it's running out of storage..." | mail -s "WARNING!!!" kamrsh441@gmail.com
else
    echo -e "Your $DISK disk is in great condition"
fi


--------------------------------------------------------------------------------------------------------------------------------
3. Write a shell script that checks whether a specified service is running and restarts it if it's not running.
Ans:

#!/bin/bash


read -p "Enter service name to check Status:"  SERVICE
STATUS=`systemctl status $SERVICE | grep Active | awk '{print $2}'`

if [[ $STATUS == active ]]
then 
    echo -e "the service $SERVICE is active"
else
    echo -e "The service is not installed"
    read -p "do you want to start this service (y/n):" CHOICE
        shopt -s nocasematch
        if [[ $CHOICE == y ]]
        then
        systemctl restart $SERVICE
        echo -e "The $SERVICE service is started."
        systemctl status $SERVICE | egrep -i "active|ssh.service - "
        else
        echo -e "Thanks for using this shell."
        fi
        shopt -u nocasematch
fi

____________OR________________

#!/bin/bash


read -p "Enter service name to check Status:"  SERVICE
STATUS=`systemctl status $SERVICE | grep Active | awk '{print $2}'`

if [[ $STATUS == active ]]
then 
    echo -e "the service $SERVICE is active"
else
    apt list --installed | grep $SERVICE
    if [[ $? == 0 ]]
    then
    echo -e "The service is already installed"
    service $SERVICE restart
    echo -e "The $SERVICE service is restarted."
    systemctl status $SERVICE | egrep -i "active|ssh.service - "
    else
        shopt -s nocasematch
        read -p "This service is not installed, do you want to install this service (y/n):" CHOICE
        if [[ $CHOICE == y ]]
        then  
        apt install $SERVICE -y
        echo -e "service has benn installed successfully"
        service $SERVICE start
        echo -e "The $SERVICE service is started."
        systemctl status $SERVICE | egrep -i "active|ssh.service - "
        else        
        echo -e "thanks for using this shell script..."   
        fi
        shopt -u nocasematch
    fi
fi

--------------------------------------------------------------------------------------------------------------------------------
4. Write a script that backs up a specified directory to a remote server using 'rsync' and SSH.
Ans:

#!/bin/bash

read -p "Enter Directory name to take backup:" DIR

if [[ -d $DIR ]]
then
    echo -e "$DIR directory found"
    rsync $DIR root@192.168.227.59:/root/
    echo -e "Backup is saved...."
else
    echo -e "Check your input"
fi

--------------------------------------------------------------------------------------------------------------------------------
5. Write a shell script that checks for software updates and installs them automatically.
Ans:

#!/bin/bash

INPUT=/mnt/c/Users/admin/Desktop/CLOUDETHIX/SHELL_SCRIPTING/PRACTICE/upgrades.txt

while read COL01
do
    apt upgrade -y
    echo -e "softwares of your system are upgraded" 
done<$INPUT

--------------------------------------------------------------------------------------------------------------------------------
6. Write a script that compresses and archives log files older than a certain number of days.
Ans:

#!/bin/bash

read -p "Enter Directory name in which old log files are present:" DIR

if [[ -d $DIR ]]
then
    echo -e "there was some old log files present in $DIR directory now it's get cmpressed in "/tmp/log.tar.gz" this location." 
else
    echo -e "please check your input..."
fi

--------------------------------------------------------------------------------------------------------------------------------
7. Write a shell script that generates a report of system resource usage, including CPU, memory, and disk usage.
Ans:

#!/bin/bash

echo -e "Statistics of your system's virtual memory: \n`vmstat`"
echo -e "------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "Input Output statistics of your system: \n`iostat`"
echo -e "------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "System activity report of your system: \n`sar -P ALL 1 1`"
echo -e "------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "Running Process statistics of your system: \n`pidstat | head`"
echo -e "------------------------------------------------------------------------------------------------------------------------------------------------"

____________OR________________

#!/bin/bash

DISK=`df -h / | awk '{print $2,$3,$4}'`
MEMORY=`free -m | awk '{print $1,$2,$3,$4}'`
CPU=`top | head -n 5`

echo -e "------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "Disk usage of your system : \n$DISK"
echo -e "------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "Status of your memory : \n$MEMORY"
echo -e "------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "Status of your central processor : \n$CPU"
echo -e "------------------------------------------------------------------------------------------------------------------------------------------------"


--------------------------------------------------------------------------------------------------------------------------------
8. Write a script that monitors a list of websites and sends an email notification if any of them are down.
Ans:

#!/bin/bash

EMAIL=kamrsh441@gmail.com
read -p "enter website name to check:" WEB
ping -c 1 www.$WEB.com > /dev/null

if [[ $? == 0 ]]
then
    echo -e " $WEB website is UP--------------------------------------------------------"
else
    echo -e "Please enter valid Website name."
    echo -e "$WEB website is down!!!" | mail -s "ALERT" $EMAIL
fi

--------------------------------------------------------------------------------------------------------------------------------

9. Write a shell script that scans a directory for files matching a certain pattern and deletes them.
Ans:

#!/bin/bash

read -p "enter the file type you want to delete:" FTYPE
read -p "enter the Path of your file:" DIR

if [[ -d $DIR ]]
then
    echo -e "File type found" 
    find $DIR -name "*.$FTYPE"  -exec rm -rf {} \;
    echo -e "$FTYPE files are deleted"
else
    echo -e "check your input please..."
fi

--------------------------------------------------------------------------------------------------------------------------------

10. Write a shell script that fetches data from an AWS EC2 API and processes the JSON response to print instance IDs and its 
public and private IP address.
Ans:
	first create an IAM user in linux and notice the secred key and accesss key of that
	
	root@DESKTOP-Q1VPUEC:~# aws configure
	AWS Access Key ID [None]: AKIA4IHOHMUPCXHAPAGZ
	AWS Secret Access Key [None]: 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
	Default region name [None]: ap-south-1
	Default output format [None]: json
	
	root@DESKTOP-Q1VPUEC:~# aws ec2 describe-instances \--instance-ids i-05e877711f96f147d
	
	then i filtered instance id, Private ip and Public ip and set them as variable in shell.
	
	
#!/bin/bash
	
	
INSTANCE="i-05e877711f96f147d"
PRIVATE="172.31.44.239"
PUBLIC="13.200.252.195"

echo -e "The instance id of your instance is $INSTANCE"
echo
echo -e "The Private ip of your instance is $PRIVATE"
echo
echo -e "The Public ip of your instance is $PUBLIC"


--------------------------------------------------------------------------------------------------------------------------------

11. Write a shell script that adds new users to the system based on a list of names in a CSV file.
Ans:

#!/bin/bash 

IN_FILE="my.csv" 

while IFS="," read col1 col2 col3
do 
    grep $col1 /etc/passwd 
    if [[ $? = 0 ]]
    then
        echo -e "user already exist."
    else
        echo -e "user does not exist."
        echo -e "Creating user..."
        useradd $col1
        echo -e "$col1 user added succesfully."
        echo -e "==============================="
    fi
done < "$IN_FILE"

--------------------------------------------------------------------------------------------------------------------------------

12. Write a script that periodically syncs a local directory with a remote server using 'rsync' and 'cron'.
Ans:

#!/bin/bash

IN_FILE=dir-name

UNAME=root
ADD=192.168.31.59
LOC=/mnt/

while read col1
do
    echo -e "Syncing the $col1 directory to remote server."
    rsync -avzh $col1 $UNAME@$ADD:$LOC
    echo -e "Your Directory is synched by remote server." 
done < "$IN_FILE"

crontab -e

* * * * *     /mnt/c/Users/admin/Desktop/CLOUDETHIX/SHELL_SCRIPTING/ASSIGNMENT/QUESTION_12.sh
(set timing 		(path of your shell script)
as you want)



--------------------------------------------------------------------------------------------------------------------------------

13. Write a shell script that automates the process of setting up a new virtual host on a web server.
Ans:

#!/bin/bash

read -p "Enter the DOMAIN for the new virtual host (e.g., example.com): " DOMAIN
read -p "Enter the path to the web root (e.g., /var/www/html/$DOMAIN): " WEB

mkdir -p "$WEB"
echo "<html>
  <head>
    <title>Welcome to $DOMAIN</title>
  </head>
  <body>
    <h1>Success! The virtual host for $DOMAIN is working!</h1>
  </body>
</html>" > "$WEB/index.html"

cat > "/etc/apache2/sites-available/$DOMAIN.conf" <<EOF
<VirtualHost *:80>
    ServerAdmin webmaster@$DOMAIN
    ServerName $DOMAIN
    DocumentRoot $WEB

    <Directory $WEB>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
EOF

a2ensite "$DOMAIN.conf"
`systemctl reload apache2`
echo "Virtual host for $DOMAIN has been set up successfully!"


--------------------------------------------------------------------------------------------------------------------------------

14. Write a script that compares two directories and reports any differences in their content.
Ans:

#!/bin/bash

read -p "enter first dirctoey name: " FIRST
read -p "enter second dirctoey name: " SECOND

sdiff "$FIRST" "$SECOND" > difference 

if [[ -d $FIRST && -d $SECOND ]]
then
    echo -e "Finding directories..." 
        if [[ $? == 0 ]]
        then 
            echo "There is no difference between $FIRST & $SECOND directory."
        else
            echo "There is some difference between $FIRST & $SECOND directory."
            cat difference
        fi
else
    echo -e "Provide correct directory name!"
fi

--------------------------------------------------------------------------------------------------------------------------------

15. Write a shell script that finds and lists all files in a directory tree that have not been accessed in a specified number 
of days.
Ans:

#!/bin/bash

read -p "Enter your directory name: " DIR
read -p "Enter how old accessed file you want to list: " OLD

if [[ -d $DIR ]]
then 
    echo -e "Directory $DIR found."
    find $DIR -type f -atime +$OLD
else
    echo -e "Directory $DIR not found."
fi

--------------------------------------------------------------------------------------------------------------------------------

16. Write a shell script that automatically organizes files in a directory based on their file types (e.g., images, audio files).
Ans:

#!/bin/bash

read -p "Enter Directory name: " DIR
read -p "Enter file type: " F_TYPE 
if [[ -d $DIR ]]
then
    echo -e "Directory found"
    TYPE_DIR="$F_TYPE-dir-$(date +%Y-%m-%d)"
    mkdir "$TYPE_DIR"
    find "$DIR" -maxdepth 1 -type f -iname "*.$F_TYPE" -exec mv {} "$TYPE_DIR" \;
    echo "Files moved to $TYPE_DIR"    
else    
    echo -e "Directory not found"
fi

--------------------------------------------------------------------------------------------------------------------------------

17. Write a script that checks for and reports any failed SSH login attempts ona Linux server.
Ans:

#!/bin/bash

LOGFILE="/var/log/auth.log"
FAILED_ATTEMPTS=$(grep "sshd.*Failed password" "$LOGFILE" | wc -l)

if [[ -f "$LOGFILE" ]]; 
then
    echo -e "Log file $LOGFILE found."
    echo "Failed SSH login attempts: $FAILED_ATTEMPTS"
        if [ "$FAILED_ATTEMPTS" -gt 0 ]; 
        then
            echo -e "Details of the last 10 failed login attempts:"
            grep "sshd.*Failed password" "$LOGFILE" | tail -n 10
        else
            echo -e "There is no failed logins"
        fi
else
    echo -e "Error: Log file $LOGFILE not found."
    exit 1
fi
 
--------------------------------------------------------------------------------------------------------------------------------

18. Write a shell script that monitors a specified file for changes and executes a specific action when the file is modified.
Ans:

#!/bin/bash

MONITOR="hello.txt"

if [[ -f "$MONITOR" ]]; 
then
	echo -e "The specified file found."
	echo "Monitoring file: $MONITOR"
		while true; do
			if [[ "$(inotifywait -e open "$MONITOR")" ]]; 
			then
				echo "File has been modified. Performing specific action."
			else
				echo "Error while monitoring the file. Exiting..."
				exit 1
			fi
		done
else
    echo -e "Error: The specified file does not exist."
    exit 1
fi

--------------------------------------------------------------------------------------------------------------------------------

19. Write a script that automates the process of creating a new MySQL database, user, and granting privileges.
Ans:

#!/bin/bash

DB_HOST="localhost"
DB_ROOT_USER="root"
DB_ROOT_PASSWORD="root"

DB_NAME="my_database"
DB_USER="mysqluser"
DB_PASSWORD="userpass"

mysql -h $DB_HOST -u $DB_ROOT_USER -p$DB_ROOT_PASSWORD -e "CREATE DATABASE IF NOT EXISTS $DB_NAME;" 2>/dev/null

mysql -h $DB_HOST -u $DB_ROOT_USER -p$DB_ROOT_PASSWORD -e "CREATE USER IF NOT EXISTS '$DB_USER'@'%' IDENTIFIED BY '$DB_PASSWORD';" 2>/dev/null

mysql -h $DB_HOST -u $DB_ROOT_USER -p$DB_ROOT_PASSWORD -e "GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%';" 2>/dev/null

mysql -h $DB_HOST -u $DB_ROOT_USER -p$DB_ROOT_PASSWORD -e "FLUSH PRIVILEGES;" 2>/dev/null

echo -e "MySQL Database, User, and Privileges created successfully."
echo -e "Database name= $DB_NAME \nDatabase username= $DB_USER"

--------------------------------------------------------------------------------------------------------------------------------

20. Write a shell script that retrieves the current weather for a specified location using a weather API.
Ans:

#!/bin/bash

TODAY=`curl -s wttr.in/"$LOCATION"?format=%t`

read -p "Enter location to check weather: " LOCATION
echo -e "Todays weather for $LOCATION is $TODAY."

--------------------------------------------------------------------------------------------------------------------------------

21. Write a script that calculates the total disk space used by a user and outputs the result.
Ans:

#!/bin/bash

SPACE=`du -sh /home/$U_NAME | awk '{print $1}' `

read -p "Enter username to check used disk space: " U_NAME  
echo -e "The space used by $U_NAME user is $SPACE."  

--------------------------------------------------------------------------------------------------------------------------------

22. Write a shell script that sends a daily summary of system logs via email.
Ans:

#!/bin/bash

EMAIL_ID="kamrsh441@gmail.com"
SUMMARY=`grep -i "$(date '+%b %e')" /var/log/syslog | awk '{print $5, $6, $7, $8}'` > /dev/null 2>&1

function LOG_MAIL () {

echo -e "Hello All 

            This is system generated email, do not reply to this email.
            The daily summary of logs of your system is generated,
            find the logs below.

            Server Name : - `hostname` 
            System logs : - "$SUMMARY"

Thank & Regards
Team CloudEthix" 
}

echo -e "Email sending... \n......"
LOG_MAIL | mail -s "System Log Summary" $EMAIL_ID
echo -e "System generated logs sent successfully"


--------------------------------------------------------------------------------------------------------------------------------

23. Write a script that performs a search and replace operation on multiple files in a directory.
Ans:

#!/bin/bash

read -p "Enter your directory name: " DIR

if [[ -d $DIR ]]
then
    echo -e "Directory $DIR found."
    read -p "Enter word you have to change: " FIRST
    read -p "Enter word by which you have to change the word : " SECOND
    grep -ril "$FIRST" "$DIR" | xargs sed "s/$FIRST/$SECOND/g"    
else
    echo -e "Directory $DIR not found."
fi

--------------------------------------------------------------------------------------------------------------------------------

24. Write a shell script that renames a large number of files based on a specified pattern or naming convention.
Ans:

#!/bin/bash

PREFIX="new_"

if ls -1 * 1>/dev/null 2>&1; 
then
    echo "Renaming files..."
        for FILE in *; 
		do
			if [ -f "$FILE" ]; 
            then
				EXTENSION="${FILE##*.}"
				NEW_NAME="${PREFIX}${FILE}"
				mv "$FILE" "$NEW_NAME"
				echo "Renamed: $FILE to $NEW_NAME"
			fi
		done
    echo "Renaming completed."
else
    echo "No files found in the current directory."
fi

--------------------------------------------------------------------------------------------------------------------------------

25. Write a script that generates and emails a report of newly created user accounts on a Linux system within the last 24 hours.
Ans:

#!/bin/bash

EMAIL_ID=kamrsh441@gmail.com
NEW_USERS=$(grep 'useradd' /var/log/auth.log* 2>/dev/null | grep "$(date -d 'yesterday' '+%b %e')" | awk '{print $1, $2, $3, $11}')

function USER_MAIL() {
    echo -e "Hello All 

            This is a system-generated email, do not reply to this email.
            There are new users created on the system; please check the usernames.

            Server Name : - $(hostname)
            System logs : - $NEW_USERS

Thank & Regards
Team CloudEthix"
}

if [[ -n "$NEW_USERS" ]]; 
then
    echo -e "New user accounts found in the last 24 hours."
    echo -e "Sending system email..."
    USER_MAIL | mail -s "New user added in system" "$EMAIL_ID"
    echo -e "Report emailed successfully."
else
    echo -e "No new user accounts found in the last 24 hours."
fi

--------------------------------------------------------------------------------------------------------------------------------
